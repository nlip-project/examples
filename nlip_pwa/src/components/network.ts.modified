/**
 * Network utilities for communicating with the backend server
 */

// import { envSignal } from '../context/app-context.js';

const BASE_URL = 'https://druid.eecs.umich.edu';
// const BASE_URL = 'https://localhost:443'; // for testing largedataupload locally
const API_ENDPOINTS = {
  nlip: `${BASE_URL}/nlip`,
  upload: `${BASE_URL}/upload`,
};

type Format =
  | 'text'
  | 'binary'
  | 'token'
  | 'structured'
  | 'location'
  | 'generic';
type Subformat =
  | 'english'
  | 'jpeg'
  | 'jpg'
  | 'png'
  | 'gif'
  | 'bmp'
  | 'conversation'
  | 'authentication'
  | 'uri';

interface Submessage {
  label?: string | number;
  format: Format;
  subformat: Subformat;
  content: string;
}

interface Message {
  control?: boolean;
  format: Format;
  subformat: Subformat;
  content: string;
  submessages?: Submessage[];
}

interface APIResponse {
  control?: boolean;
  format: Format;
  subformat: Subformat;
  content: string;
  submessages?: Submessage[];
}

interface ChatMessage {
  type: 'user' | 'ai';
  content: string;
  timestamp: number;
  id: string;
  image?: {
    data: string;
    type: string;
  };
}

interface ChatSession {
  id: string;
  title: string;
  messages: ChatMessage[];
  createdAt: number;
  lastUpdated: number;
}

// Track if we've sent the initial message and whether server stores chat history
let hasSentInitialMessage = false;
let serverStoresChatHistory = false;

/**
 * Send the initial message to establish the NLIP connection
 * This must be called before any other communication
 */
export async function sendInitialMessage(): Promise<void> {
  if (hasSentInitialMessage) {
    return;
  }

  const request: Message = {
    format: 'text',
    subformat: 'english',
    content: 'NLIP_INIT',
  };

  try {
    const response = await fetch(`${API_ENDPOINTS.nlip}/`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(request),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data: APIResponse = await response.json();
    if (data.format !== 'text' || data.subformat !== 'english') {
      throw new Error('Invalid response format for initial message');
    }

    // Check if server stores chat history
    const storeHistoryLabel = data.submessages?.find(
      (msg) => msg.label === 'store_chat_history'
    );
    serverStoresChatHistory = storeHistoryLabel?.content === 'true';

    hasSentInitialMessage = true;
  } catch (error) {
    console.error('Error sending initial message:', error);
    throw error;
  }
}

/**
 * Get the current chat session from localStorage
 */
function getCurrentChatSession(): ChatSession | null {
  const savedSessions = localStorage.getItem('chat-sessions');
  if (!savedSessions) return null;

  const sessions: ChatSession[] = JSON.parse(savedSessions);
  const currentSessionId = sessions[0]?.id; // Assuming first session is current
  return sessions.find((s) => s.id === currentSessionId) || null;
}

/**
 * Format chat history for sending to server
 */
function formatChatHistory(session: ChatSession): string {
  return JSON.stringify({
    sessionId: session.id,
    title: session.title,
    messages: session.messages.map((msg) => ({
      type: msg.type,
      content: msg.content,
      timestamp: msg.timestamp,
      image: msg.image,
    })),
  });
}

/**
 * Send a text message to the NLIP endpoint
 */
export async function sendTextMessage(
  text: string,
  includeHistory: boolean = true
): Promise<string> {
  // Ensure initial message has been sent
  await sendInitialMessage();

  const request: Message = {
    format: 'text',
    subformat: 'english',
    content: text,
  };

  // If server doesn't store chat history and includeHistory is true,
  // include the current chat session history
  if (!serverStoresChatHistory && includeHistory) {
    const currentSession = getCurrentChatSession();
    if (currentSession) {
      request.submessages = [
        {
          format: 'text',
          subformat: 'english',
          content: formatChatHistory(currentSession),
          label: 'chat_history',
        },
      ];
    }
  }

  try {
    const response = await fetch(`${API_ENDPOINTS.nlip}/`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(request),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data: APIResponse = await response.json();
    return data.content;
  } catch (error) {
    console.error('Error sending text message:', error);
    throw error;
  }
}

/**
 * Send an image with an optional prompt to the NLIP endpoint
 */
export async function sendImageMessage(
  prompt: string,
  base64Image: string,
  mimeType: string,
  includeHistory: boolean = true
): Promise<string> {
  const imageFormat = mimeType.split('/')[1].toLowerCase() as Subformat;

  // Validate image format
  if (!['jpeg', 'jpg', 'png', 'gif', 'bmp'].includes(imageFormat)) {
    throw new Error(
      'Unsupported image format. Please use JPEG, PNG, GIF, or BMP.'
    );
  }

  const request: Message = {
    format: 'text',
    subformat: 'english',
    content: prompt || 'What do you see in this image?',
    submessages: [
      {
        format: 'binary',
        subformat: imageFormat,
        content: base64Image,
      },
    ],
  };

  // If server doesn't store chat history and includeHistory is true,
  // include the current chat session history
  if (!serverStoresChatHistory && includeHistory) {
    const currentSession = getCurrentChatSession();
    if (currentSession) {
      request.submessages?.push({
        format: 'text',
        subformat: 'english',
        content: formatChatHistory(currentSession),
        label: 'chat_history',
      });
    }
  }

  try {
    const response = await fetch(`${API_ENDPOINTS.nlip}/`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(request),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data: APIResponse = await response.json();
    return data.content;
  } catch (error) {
    console.error('Error sending image message:', error);
    throw error;
  }
}

/**
 * Request a redirection URL for large file uploads
 */
export async function requestUploadUrl(): Promise<string> {
  const request: Message = {
    control: true,
    format: 'text',
    subformat: 'english',
    content: 'request_upload_url',
  };

  try {
    const response = await fetch(`${API_ENDPOINTS.nlip}/`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(request),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data: APIResponse = await response.json();
    if (data.format !== 'structured' || data.subformat !== 'uri') {
      throw new Error('Invalid response format for upload URL');
    }
    return data.content;
  } catch (error) {
    console.error('Error requesting upload URL:', error);
    throw error;
  }
}

/**
 * Upload a file to the server
 * Returns the response data from the server
 */
export async function handleFileUpload(
  file: File
): Promise<{ message?: string; url?: string }> {
  try {
    // First, get the upload URL
    const uploadUrl = await requestUploadUrl();

    // Now upload the file
    const formData = new FormData();
    formData.append('file', file);

    const uploadResponse = await fetch(uploadUrl, {
      method: 'POST',
      body: formData,
    });

    if (!uploadResponse.ok) {
      const errorText = await uploadResponse
        .text()
        .catch(() => 'Unknown error');
      throw new Error(`Upload failed: ${errorText}`);
    }

    const responseData = await uploadResponse.json().catch(() => null);
    return {
      message: `Successfully uploaded ${file.name}!`,
      url: responseData?.url,
    };
  } catch (error) {
    console.error('Upload error:', error);
    throw error;
  }
}
